{"version":3,"sources":["Components/AddTask.js","Actions/addTask.js","App.js","reportWebVitals.js","Reducers/tasks.js","Reducers/index.js","Reducers/store.js","index.js"],"names":["initializeIcons","connect","props","useState","state","setInputs","openModal","ChangeModal","handleInputChange","event","target","name","value","style","flex","height","margin","display","justifyContent","alignItems","textAlign","minWidth","padding","backgroundColor","onSubmit","preventDefault","Label","required","TextField","onChange","multiline","DatePicker","placeholder","onSelectDate","date","toString","Dropdown","options","text","key","Math","random","onChanged","item","status","PrimaryButton","onClick","dispatch","type","task","taskData","id","Modal","isOpen","isBlocking","title","details","DefaultButton","App","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","initialState","data","todos","action","rootReducer","combineReducers","store","createStore","window","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6e95bcfb.chunk.js","sourcesContent":["import React, {useState} from \"react\";\nimport {connect} from 'react-redux';\nimport { addTask } from \"../Actions/addTask\";\nimport {   DatePicker, DefaultButton, Dropdown, Label, Modal, PrimaryButton, TextField}  from \"@fluentui/react\"\nimport { initializeIcons } from '@fluentui/react/lib/Icons';\n\ninitializeIcons(/* optional base url */);\n\n\n\n\n\n const AddTask = (props) =>  {\n\n   \n\n\n    const [state, setInputs] = useState({});\n    const [openModal, ChangeModal] = useState(false);\n\n    const handleInputChange = (event) => {\n    //alert(state.date)\n\n    \n        setInputs({\n            ...state,\n            [event.target.name]: event.target.value,\n        } )\n\n       // alert(state.title)\n    }\n\n    const handleSubmit = () =>{\n        \n       \n         props.dispatch(addTask({taskData: state}))\n        \n         ChangeModal (!openModal);\n         //alert(openModal)\n\n    }\n\n    const handleDate =(date)=> {\n        setInputs({\n            ...state,\n            date: date.toString(),\n        })\n    }\n\n    const handleSelection = (item)=> {\n        setInputs({\n            ...state,\n            status: item.text,\n        })\n    }\n\n   \n\n    return (\n        \n        <div style={{\n            flex: '1',\n            height:'50%',  \n            margin:'0',\n            display: \"flex\",\n            justifyContent: \"center\",\n            alignItems: \"center\",\n            textAlign: 'left'\n            \n\n             \n        }}>\n            \n           <div style={{minWidth:'300px', padding:'20px', backgroundColor:'#F8F8F8'}}>\n\n           <form onSubmit={ (event)=> {\n                event.preventDefault();\n               \n            // alert(input)\n               \n                    } }  >\n\n            \n            <Label required>Title</Label>\n            <TextField name='title' onChange={handleInputChange} /> \n            <Label>Details</Label>\n            <TextField multiline name='details' onChange={handleInputChange}/> \n            <Label required>Date</Label>\n            <DatePicker placeholder='Select a date' name='date'  onSelectDate={handleDate}/> <br />\n            {/* //\"ToDo\", \"Ongoing\", \"Stalled\", or \"Done\".\n             */}\n            <Label>Status</Label>\n            <Dropdown \n            placeholder=\"Select the status\"\n            options={[\n                {text: 'To Do', key:Math.random()},\n                {text: 'Ongoing', key: Math.random()},\n                {text: 'Stalled', key:Math.random()},\n                {text: 'Done', key: Math.random()}\n            ]} \n            onChanged={handleSelection}\n            /> <br></br>\n\n            <div style={{textAlign:'right'}}>\n                <PrimaryButton text=\"Add\" onClick={handleSubmit} />\n            </div>\n            </form>\n           <Modal \n           isOpen={openModal}\n           isBlocking={false}\n           \n           \n           >\n               <div style={{textAlign:'center '}}>\n                   <h3>Task added!</h3><hr/>\n                   <div style={{textAlign:'left', padding:'10px', }}>\n                   <Label>Title: {state.title}</Label>\n                   <Label>Details: {state.details}</Label>\n                   <Label>Date: {state.date}</Label>\n                   <Label>Status: {state.status}</Label>\n                   </div>\n                   <div style={{padding:'20px'}}>\n                   <DefaultButton text=\"Close\" onClick={()=>ChangeModal(!openModal)} />\n\n                   </div>\n               </div>\n           </Modal>\n\n           </div>\n        </div>\n\n       \n\n    )\n}\n\nexport default connect() (AddTask);","const ADD_TASK = 'ADD_TASK';\n\nexport const addTask = ({taskData}) => {\n    return {\n        type: ADD_TASK,\n        task: taskData,\n        id: Math.random()\n    }\n}\n\n\n\n\n","import './App.css';\nimport AddTask from './Components/AddTask';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n     \n     <AddTask />\n     \n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","\nconst initialState = {\n   data:[],\n}\n\nconst todos = (state = initialState, action) => {\n    switch(action.type) {\n        case 'ADD_TASK': return {\n            \n            // ...state, \n            data: [\n                ...state.data,\n                {\n                    title: action.task.title,\n                    details: action.task.details,\n                    date: action.task.date,\n                    status: action.task.status,\n                    id: action.id,\n                },\n            ],\n        };   \n        case 'DEL_TASK': return {}\n\n        default: return state;\n    }\n};\n\nexport default todos;","import {combineReducers} from 'redux';\nimport todos from './tasks'\n\n\nconst rootReducer = combineReducers({\n    todos,\n}) \n\nexport default rootReducer;","import { createStore } from \"redux\";\nimport  rootReducer   from \"./index\";\n\n\n\nconst store = createStore(\n    rootReducer,\n     window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n    \n    );\n\nexport default store;\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nimport { Provider } from \"react-redux\";\nimport store from \"./Reducers/store\";\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store} >\n    <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}